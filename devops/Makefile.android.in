REPO_SOVRIN_ORG_ANDROID_PREBUILT_URL := https://repo.sovrin.org/android/libindy
LIBSOVTOKEN_ANDROID_BUILD_SCRIPTS=$(PROJECT_DIR)/libsovtoken/build_scripts/android
LIBSOVTOKEN_DEPS_FILE := $(LIBSOVTOKEN_ANDROID_BUILD_SCRIPTS)/libsovtoken/libsovtoken.dependencies.txt
LIBSOVTOKEN_ANDROID_SETTINGS_FILE := $(LIBSOVTOKEN_ANDROID_BUILD_SCRIPTS)/android_settings.txt

ANDROID_BUILD_DIR := $(PROJECT_DIR)/devops/_build/android
ANDROID_PREBUILT_DIR ?= $(ANDROID_BUILD_DIR)/prebuilt
ANDROID_NDK_DIR ?= $(ANDROID_BUILD_DIR)

get_android_dependency = $(call check_non_empty,$(shell sed -n -e '/^$(1)=.\+/bx' -e 'd' -e ':x' -e 'p' -e 'q' $(2)),"$(1) is not found in $(2)")

ifndef ANDROID_NDK_VERSION
ANDROID_NDK_NAME := $(shell grep ndk $(LIBSOVTOKEN_ANDROID_SETTINGS_FILE) | cut -d '=' -f 2)
ANDROID_NDK_VERSION := $(lastword $(subst -, ,$(ANDROID_NDK_NAME)))
else
ANDROID_NDK_NAME := android-ndk-$(ANDROID_NDK_VERSION)
endif

ANDROID_NDK_ARCHIVE_NAME := $(ANDROID_NDK_NAME)-$(call to_lower,$(shell uname))-$(shell uname -m).zip

LIBINDY_DEP_SPEC := $(subst =, ,$(call get_android_dependency,libindy,$(LIBSOVTOKEN_DEPS_FILE)))
LIBINDY_VERSION ?= $(word 2,$(LIBINDY_DEP_SPEC))
LIBINDY_BRANCH ?= $(word 3,$(LIBINDY_DEP_SPEC))

ANDROID_ARCHS ?= arm armv7 arm64 x86 x86_64

EXPORT_ENV += GIT_SHA1_SHORT

# ########### RULES #################


# sort removes possible duplicates
$(sort $(ANDROID_BUILD_DIR) $(ANDROID_PREBUILT_DIR) $(ANDROID_NDK_DIR)):
	mkdir -p $@

# .PRECIOUS to stop make remove files that it treats as intermediate
.PRECIOUS: $(ANDROID_PREBUILT_DIR)/openssl_%.zip
$(ANDROID_PREBUILT_DIR)/openssl_%.zip: | $(ANDROID_PREBUILT_DIR)
	cd $(@D) && curl -fLO $(REPO_SOVRIN_ORG_ANDROID_PREBUILT_URL)/deps/openssl/openssl_$*.zip

.PRECIOUS: $(ANDROID_PREBUILT_DIR)/libsodium_%.zip
$(ANDROID_PREBUILT_DIR)/libsodium_%.zip: | $(ANDROID_PREBUILT_DIR)
	cd $(@D) && curl -fLO $(REPO_SOVRIN_ORG_ANDROID_PREBUILT_URL)/deps/sodium/libsodium_$*.zip

.PRECIOUS: $(ANDROID_PREBUILT_DIR)/libindy_android_%_$(LIBINDY_VERSION).zip
$(ANDROID_PREBUILT_DIR)/libindy_android_%_$(LIBINDY_VERSION).zip: | $(ANDROID_PREBUILT_DIR)
	cd $(@D) && curl -fLO $(REPO_SOVRIN_ORG_ANDROID_PREBUILT_URL)/$(LIBINDY_BRANCH)/$(LIBINDY_VERSION)/libindy_android_$*_$(LIBINDY_VERSION).zip

.PRECIOUS: $(ANDROID_PREBUILT_DIR)/%
$(ANDROID_PREBUILT_DIR)/%: $(ANDROID_PREBUILT_DIR)/%.zip
	unzip -o -qq -d $(<D) $<
	touch $@

.PRECIOUS: $(ANDROID_PREBUILT_DIR)/libindy_%
$(ANDROID_PREBUILT_DIR)/libindy_%: $(ANDROID_PREBUILT_DIR)/libindy_android_%_$(LIBINDY_VERSION).zip
	unzip -o -qq -d $(<D) $<
	touch $@

$(ANDROID_NDK_DIR)/$(ANDROID_NDK_ARCHIVE_NAME): | $(ANDROID_NDK_DIR)
	cd $(@D) && curl -fLO https://dl.google.com/android/repository/$(@F)

$(ANDROID_NDK_DIR)/$(ANDROID_NDK_NAME): $(ANDROID_NDK_DIR)/$(ANDROID_NDK_ARCHIVE_NAME)
	unzip -o -qq -d $(<D) $<
	touch $@

.PHONY: android_ndk
android_ndk: $(ANDROID_NDK_DIR)/$(ANDROID_NDK_NAME)

android_prebuilt_%: $(ANDROID_PREBUILT_DIR)/openssl_% \
			$(ANDROID_PREBUILT_DIR)/libsodium_% \
			$(ANDROID_PREBUILT_DIR)/libindy_% ;

android_build_%: android_ndk android_prebuilt_%
	cd $(LIBSOVTOKEN_ANDROID_BUILD_SCRIPTS)/libsovtoken && \
		BUILD_DIR=$(ANDROID_BUILD_DIR) \
		TARGET_DIR=$(ANDROID_BUILD_DIR)/libsovtoken \
		ANDROID_NDK_ROOT=$(ANDROID_NDK_DIR)/$(ANDROID_NDK_NAME) \
		PREBUILT=$(ANDROID_PREBUILT_DIR) \
		OPENSSL_DIR=$(ANDROID_PREBUILT_DIR)/openssl_$* \
		SODIUM_DIR=$(ANDROID_PREBUILT_DIR)/libsodium_$* \
		SODIUM_LIB_DIR=$(ANDROID_PREBUILT_DIR)/libsodium_$*/lib \
		SODIUM_INCLUDE_DIR=$(ANDROID_PREBUILT_DIR)/libsodium_$*/include \
		LIBINDY_DIR=$(ANDROID_PREBUILT_DIR)/libindy_$*/lib \
		CARGO_VERBOSITY=-v \
			/bin/bash -ex build.nondocker.sh -s $*

.PHONY: android_pack
android_pack:
	PACKAGE_NAME=$(PACKAGE_NAME) \
	LIBSOVTOKEN_VER=$(SRC_VERSION) \
	GIT_REV=$(if $(GIT_SHA1_SHORT),$(GIT_SHA1_SHORT),$(shell git rev-parse --short HEAD)) \
		/bin/bash -ex $(LIBSOVTOKEN_ANDROID_BUILD_SCRIPTS)/libsovtoken/pack.sh $(ANDROID_BUILD_DIR)/libsovtoken

package_android: $(ANDROID_ARCHS:%=android_build_%) android_pack
